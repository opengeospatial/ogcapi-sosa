@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:      <http://www.w3.org/ns/shacl#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .
@prefix geojson: <https://purl.org/geojson/vocab#> .
@prefix sosa:    <http://www.w3.org/ns/sosa/> .
@base <https://www.ogc.org/rules/sosa/> .

<#testRequiredTime>
    a                   sh:NodeShape ;
    sh:targetClass      sosa:Observation ;
    sh:targetSubjectsOf sosa:hasResult, sosa:hasSimpleResult ;
    sh:sparql [
        sh:message          "sosa:resultTime or sosa:phenomenonTime is required, and no more than 1 of each is allowed" ;
        sh:select """
            PREFIX sh: <http://www.w3.org/ns/shacl#>
            PREFIX sosa: <http://www.w3.org/ns/sosa/>
            PREFIX geojson: <https://purl.org/geojson/vocab#>
            SELECT $this (CONCAT(COALESCE(COUNT(?resultTime), 0), ' x sosa:resultTime, ', COALESCE(COUNT(?phenomenonTime), 0), ' x sosa:phenomenonTime') AS ?value) WHERE {
                OPTIONAL { $this sosa:phenomenonTime ?phenomenonTime }
                OPTIONAL { $this sosa:resultTime ?resultTime}
                OPTIONAL { ?collection sosa:hasMember+|geojson:features+ $this ; sosa:phenomenonTime ?phenomenonTime }
                OPTIONAL { ?collection sosa:hasMember+|geojson:features+ $this ; sosa:resultTime ?resultTime }
            }
            GROUP BY $this
            HAVING (count(?resultTime) > 1 || count(?phenomenonTime) > 1 || count(?resultTime) + count(?phenomenonTime) < 1)
        """ ;
    ] ;
.

<#testObservedProperty>
    a                   sh:NodeShape ;
    sh:targetClass      sosa:Observation ;
    sh:targetSubjectsOf sosa:hasResult, sosa:hasSimpleResult ;
    sh:sparql [
        sh:message          "Exactly 1 of sosa:observedProperty is required" ;
        sh:select """
            PREFIX sh: <http://www.w3.org/ns/shacl#>
            PREFIX sosa: <http://www.w3.org/ns/sosa/>
            PREFIX geojson: <https://purl.org/geojson/vocab#>
            SELECT $this (sosa:observedProperty as ?path) (GROUP_CONCAT(?prop; separator=';') AS ?value) WHERE {
                { $this sosa:observedProperty ?prop }
                UNION
                { ?collection sosa:hasMember+|geojson:features+ $this ; sosa:observedProperty ?prop }
            }
            GROUP BY ?prop
            HAVING (count(?prop) > 1)
        """ ;
    ] ;
.


<#testFeatureOfInterest>
    a                   sh:NodeShape ;
    sh:targetClass      sosa:Observation ;
    sh:targetSubjectsOf sosa:hasResult, sosa:hasSimpleResult ;
    sh:property         [
        sh:message          "Exactly one feature of interest (sosa:hasFeatureOfInterest/sosa:isFeatureOfInterestOf) is required" ;
        sh:path     ( [ sh:zeroOrMorePath [ sh:oneOrMorePath [ sh:alternativePath ( [ sh:inversePath
                                                                                                                geojson:features ]
                                                                                                      [ sh:inversePath
                                                                                                                sosa:hasMember ] ) ] ] ]
                                        [ sh:alternativePath ( sosa:hasFeatureOfInterest [ sh:inversePath
                                                                                                   sosa:isFeatureOfInterestOf ] ) ] ) ;
                          sh:minCount 1 ;
                          sh:maxCount 1 ; ] ;
.

<#testResult>
    a                   sh:NodeShape ;
    sh:targetClass      sosa:Observation ;
    sh:targetSubjectsOf sosa:hasResult, sosa:hasSimpleResult ;
    sh:property         [
        sh:message          "Exactly one of sosa:hasResult or sosa:hasSimpleResult is required per observation" ;
        sh:path     [ sh:alternativePath ( sosa:hasResult sosa:hasSimpleResult ) ] ;
                          sh:minCount 1 ;
                          sh:maxCount 1 ;
                  ] ;
.


<#testSimpleResultLiteral>
    a                  sh:NodeShape ;
    sh:targetObjectsOf sosa:hasSimpleResult ;
    sh:nodeKind        sh:IRIOrLiteral ;
    sh:message         "sosa:hasSimpleResult is a simple Literal" ;
.

<#testResultNotEmptyNode>
    a                   sh:NodeShape ;
    sh:targetSubjectsOf sosa:hasResult-Disabled ;
    sh:message          "sosa:hasResult not a blank node" ;
    sh:sparql           [ sh:select """
      PREFIX geojson: <https://purl.org/geojson/vocab#>
      SELECT $this (sosa:hasResult as ?path) ?value
      WHERE {
        $this sosa:hasResult ?value .
        FILTER NOT EXISTS { ?value ?p ?o }
      }
    """ ; ]
.
